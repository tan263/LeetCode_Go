import "container/heap"

type maxHeap []int

func(h maxHeap) Len() int {return len(h)}

func(h maxHeap) Less(i, j int) bool {return -h[i] < -h[j]}

func(h maxHeap) Swap(i, j int) {h[i], h[j] = h[j], h[i]}

func(h *maxHeap) Push(e interface{}) {
    *h = append(*h, e.(int))
}

func(h *maxHeap) Pop() interface{} {
    old := *h
    l := len(old)
    temp := old[l-1]
    *h = old[:l-1]
    return temp
}

func lastStoneWeight(stones []int) int {
    h := &maxHeap{}
    heap.Init(h)
    for _, stone := range(stones) {
        heap.Push(h, stone)
    }
    
    for ; len(*h) > 1; {
        s1 := heap.Pop(h).(int)
        s2 := heap.Pop(h).(int)
        if s1> s2 {
            heap.Push(h, s1 - s2)
        } else if s2 > s1{
            heap.Push(h, s2 - s1)
        }
    }
    if len(*h) == 1 {
        return heap.Pop(h).(int)
    }
    return 0
}
