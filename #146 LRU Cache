type Node struct{
    Key int
    Val int
    Previous *Node
    Next *Node
}

type LRUCache struct {
    Capacity int
    Cache map[int]*Node
    Head *Node
    Tail *Node
}


func Constructor(capacity int) LRUCache {
    head := &Node{}
    tail := &Node{Previous: head}
    head.Next = tail
    return LRUCache{
        Capacity: capacity,
        Cache: make(map[int]*Node, capacity),
        Head: head,
        Tail: tail,
    }
}


func (this *LRUCache) Get(key int) int {
    if node, ok := this.Cache[key]; ok && len(this.Cache) > 0{
        val := node.Val
        previous := node.Previous
        next := node.Next
        previous.Next, next.Previous = next, previous
        node.Previous = this.Tail.Previous
        this.Tail.Previous.Next = node
        node.Next = this.Tail
        this.Tail.Previous = node
        
        return val
    }
    return -1
}


func (this *LRUCache) Put(key int, value int)  {
    if node, ok := this.Cache[key]; ok {
        node.Val = value
        previous := node.Previous
        next := node.Next
        previous.Next, next.Previous = next, previous
        node.Previous = this.Tail.Previous
        this.Tail.Previous.Next = node
        node.Next = this.Tail
        this.Tail.Previous = node
    } else{
        if _, ok := this.Cache[key]; !ok && len(this.Cache) == this.Capacity {
            keyToDelete := this.Head.Next.Key
            delete(this.Cache, keyToDelete)
            this.Head.Next = this.Head.Next.Next
            this.Head.Next.Previous = this.Head
        }
        node := &Node{Key:key, Val: value, Previous: this.Tail.Previous, Next: this.Tail}
        this.Cache[key] = node
        node.Previous.Next = node
        this.Tail.Previous = node
    }
}


/**
 * Your LRUCache object will be instantiated and called as such:
 * obj := Constructor(capacity);
 * param_1 := obj.Get(key);
 * obj.Put(key,value);
 */
