type MinStack struct {
    vals []int
    mins []int
}


func Constructor() MinStack {
    return MinStack{vals: []int{}, mins: []int{}}
}


func (this *MinStack) Push(val int)  {
    if len(this.vals) == 0 {
        this.mins = append(this.mins, val)
    } else {
        if this.mins[len(this.mins)-1] > val {
            this.mins = append(this.mins, val)
        } else {
            this.mins = append(this.mins, this.mins[len(this.mins)-1])
        }
    }
    this.vals = append(this.vals, val)
}


func (this *MinStack) Pop()  {
    if len(this.vals) > 0 {
        this.vals = this.vals[:len(this.vals)-1]
        this.mins = this.mins[:len(this.mins)-1]
    }
}


func (this *MinStack) Top() int {
    return this.vals[len(this.vals)-1]
}


func (this *MinStack) GetMin() int {
    return this.mins[len(this.mins)-1]
}


/**
 * Your MinStack object will be instantiated and called as such:
 * obj := Constructor();
 * obj.Push(val);
 * obj.Pop();
 * param_3 := obj.Top();
 * param_4 := obj.GetMin();
 */
