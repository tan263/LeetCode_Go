func partition(s string) [][]string {
    result := make([][]string, 0)
    current := make([]string, 0)
    
    var dfs func(i int)
    dfs = func(i int) {
        if i >= len(s) {
            currentCopy := make([]string, len(current))
            copy(currentCopy, current)
            result = append(result, currentCopy)
        }
        for j := i; j < len(s); j++ {
            if isPalindrome(s[i:j+1]){
                current = append(current, s[i:j+1])
                dfs(j+1)
                current = current[:len(current)-1]
            }
        }
    }
    dfs(0)
    
    return result
}

func isPalindrome(s string) bool{
    l := len(s)
    m := (l-1)/2
    for i := 0; i <= m; i++ {
        if s[i] != s[l-i-1] {
            return false
        }
    }
    return true
}
