import "container/heap"

type maxHeap []int
type minHeap []int

func (h maxHeap) Len() int { return len(h)}

func (h maxHeap) Less(i, j int) bool { return h[i] > h[j]}

func (h maxHeap) Swap(i, j int) { h[i], h[j] = h[j], h[i]}

func (h *maxHeap) Push(e interface{}) {
    *h = append(*h, e.(int))
}

func (h *maxHeap) Pop() interface{} {
    old := *h
    e := old[len(old)-1]
    old = old[:len(old)-1]
    *h = old
    return e
}

func (h minHeap) Len() int { return len(h)}

func (h minHeap) Less(i, j int) bool { return h[i] < h[j]}

func (h minHeap) Swap(i, j int) { h[i], h[j] = h[j], h[i]}

func (h *minHeap) Push(e interface{}) {
    *h = append(*h, e.(int))
}

func (h *minHeap) Pop() interface{} {
    old := *h
    e := old[len(old)-1]
    old = old[:len(old)-1]
    *h = old
    return e
}

type MedianFinder struct {
    MaxHeap *maxHeap
    MinHeap *minHeap
}


func Constructor() MedianFinder {
    maxH := &maxHeap{}
    heap.Init(maxH)
    minH := &minHeap{}
    heap.Init(minH)
    return MedianFinder{maxH, minH}
}


func (this *MedianFinder) AddNum(num int)  {
    lMax := len(*(this.MaxHeap))
    maxH := *(this.MaxHeap)
    if lMax == 0 {
        heap.Push(this.MaxHeap, num)
    } else if num > maxH[0] {
        heap.Push(this.MinHeap, num)
    } else {
        heap.Push(this.MaxHeap, num)
    }
    
    lMax = len(*(this.MaxHeap))
    lMin := len(*(this.MinHeap))
    
    if lMax - 1 > lMin {
        e := heap.Pop(this.MaxHeap).(int)
        heap.Push(this.MinHeap, e)
    } else if lMin - 1 > lMax {
        e := heap.Pop(this.MinHeap).(int)
        heap.Push(this.MaxHeap, e)
    }
}


func (this *MedianFinder) FindMedian() float64 {
    lMax := len(*(this.MaxHeap))
    lMin := len(*(this.MinHeap))
    if lMin > lMax {
        minH := *(this.MinHeap)
        return float64(minH[0])
    } else if lMin == lMax{
        minH := *(this.MinHeap)
        maxH := *(this.MaxHeap)        
        return (float64(minH[0]) + float64(maxH[0]))/2
    } else {
        maxH := *(this.MaxHeap)        
        return float64(maxH[0])
    }
}


/**
 * Your MedianFinder object will be instantiated and called as such:
 * obj := Constructor();
 * obj.AddNum(num);
 * param_2 := obj.FindMedian();
 */
