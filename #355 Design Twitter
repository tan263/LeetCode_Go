type Tweet struct {
    UserId int
    TweetId int
}

type User struct {
    UserId int
    Follows []int
}

type Twitter struct {
    Tweets []Tweet
    Users  map[int]User
}


func Constructor() Twitter {
    return Twitter{[]Tweet{}, map[int]User{}}
}


func (this *Twitter) PostTweet(userId int, tweetId int)  {
    tweet := Tweet{userId, tweetId}
    (*this).Tweets = append((*this).Tweets, tweet)
    if _, ok := (*this).Users[userId]; !ok{
        (*this).Users[userId] = User{userId, []int{}}
    }
}


func (this *Twitter) GetNewsFeed(userId int) []int {
    news := make([]int, 0)
    j := 0
    for i := 0; i < len((*this).Tweets) && j < 10; i++ {
        t := (*this).Tweets[len((*this).Tweets) - 1 - i]
        for _, follow := range((*this).Users[userId].Follows) {
            if follow == t.UserId {
                news = append(news, t.TweetId)
                j++
            }
        }
        if t.UserId == userId {
            news = append(news, t.TweetId)
            j++
        }
    }
    return news
}


func (this *Twitter) Follow(followerId int, followeeId int)  {
    if _, ok := (*this).Users[followerId]; !ok{
        (*this).Users[followerId] = User{followerId, []int{followeeId}}
    } else {
        exist := false
        for i := range((*this).Users[followerId].Follows) {
            if (*this).Users[followerId].Follows[i] == followeeId {
                exist = true
                break
            }
        }
        if !exist{
            follows := (*this).Users[followerId].Follows
            follows = append(follows, followeeId)
            (*this).Users[followerId] = User{followerId, follows}
        }        
    }
}


func (this *Twitter) Unfollow(followerId int, followeeId int)  {
    if _, ok := (*this).Users[followerId]; !ok{
        (*this).Users[followerId] = User{followerId, []int{}}
    } else {
        for i := range((*this).Users[followerId].Follows) {
            if (*this).Users[followerId].Follows[i] == followeeId {
                fmt.Println(followeeId)
                follows := (*this).Users[followerId].Follows
                follows = append(follows[:i], follows[i+1:]...)
                (*this).Users[followerId] = User{followerId, follows}
            }
        }
    }
}


/**
 * Your Twitter object will be instantiated and called as such:
 * obj := Constructor();
 * obj.PostTweet(userId,tweetId);
 * param_2 := obj.GetNewsFeed(userId);
 * obj.Follow(followerId,followeeId);
 * obj.Unfollow(followerId,followeeId);
 */
